/**
 * Author: Saw Xue Zheng
 * Description: Interfaces the Main Form
 * 
 */
package Form;

/**
 *
 * @author User
 */
import java.util.*;
import java.io.*;
import Form.Classes.*;
import java.awt.event.KeyEvent;

public class MainFrame extends javax.swing.JFrame implements Serializable{

    /**
     * Creates new form MainFrame
     */
    

    private ArrayList<Student> arr = new ArrayList<Student>(); //ArrayList to hold Student's information
    private RoomListing r; //Room list to hold all informations concerning the courses information and room schedules
    private String title = "Course Scheduling"; //Title of the jFrame

    public MainFrame() {
        
        
        this.setTitle(title); //sets the title of the jFrame
        r = new RoomListing(1); //Creates a RoomList with 1 room
        initComponents();
        //Redirect system.out to ps
         
         baos = new ByteArrayOutputStream();
         ps = new PrintStream(baos);
        
        System.setOut(ps);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jOptionPane1 = new javax.swing.JOptionPane();
        jOptionPane2 = new javax.swing.JOptionPane();
        jFrame1 = new javax.swing.JFrame();
        jOptionPane3 = new javax.swing.JOptionPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        add_room_but = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<String>();
        jLabel1 = new javax.swing.JLabel();
        rmv_room_but = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        check_sched_but = new javax.swing.JButton();
        schedule_course_but = new javax.swing.JButton();
        rmv_stud_but = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        add_stud_but = new javax.swing.JButton();
        create_course_but = new javax.swing.JButton();
        rmv_course_but = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        msgbox = new javax.swing.JTextArea();
        jComboBox1 = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable3);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        add_room_but.setText("Add Room");
        add_room_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_room_butActionPerformed(evt);
            }
        });

        listmodel_room = new javax.swing.DefaultListModel<>();
        jList1.setModel(listmodel_room);

        for(Room rm : r.getRoomList())
        {
            listmodel_room.addElement(rm.toString());
        }
        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("Available Rooms: ");

        rmv_room_but.setText("Remove Room");
        rmv_room_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmv_room_butActionPerformed(evt);
            }
        });

        jLabel2.setText("Available Courses:");

        this.course_table = new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null,null},
            },
            new String [] {
                "Name", "Start Time", "End Time", "Room", "# Enrolled"
            }){
                @Override
                public boolean isCellEditable(int row, int column)
                {
                    return false;
                }
            };
            jTable4.setModel(course_table);
            jTable4.setShowGrid(true);
            jTable4.setAutoCreateRowSorter(true);
            course_table.setRowCount(7);
            refresh_course_table();
            jTable4.getTableHeader().setReorderingAllowed(false);
            jScrollPane5.setViewportView(jTable4);

            check_sched_but.setText("Check Schedule");
            check_sched_but.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    check_sched_butActionPerformed(evt);
                }
            });

            schedule_course_but.setText("Schedule Courses");
            schedule_course_but.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    schedule_course_butActionPerformed(evt);
                }
            });

            rmv_stud_but.setText("Remove Student");
            rmv_stud_but.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    rmv_stud_butActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(55, 55, 55)
                    .addComponent(rmv_stud_but, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(307, 307, 307)
                    .addComponent(check_sched_but, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(schedule_course_but, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(39, 39, 39))
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(check_sched_but, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(schedule_course_but, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rmv_stud_but, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
            );

            this.stud_table = new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null},
                },
                new String [] {
                    "ID", "First Name", "Last Name", "Phone Number"
                }){
                    @Override
                    public boolean isCellEditable(int row, int column)
                    {
                        return false;
                    }
                };
                jTable1.setAutoCreateRowSorter(true);
                jTable1.setModel(stud_table);
                jTable1.setShowGrid(true);

                stud_table.setRowCount(9);
                refresh_stud_table();
                jTable1.getTableHeader().setReorderingAllowed(false);
                jScrollPane3.setViewportView(jTable1);
                //add selection listener
                selectionmodel = jTable1.getSelectionModel();

                selectionmodel.addListSelectionListener(new javax.swing.event.ListSelectionListener()
                    {
                        public void valueChanged(javax.swing.event.ListSelectionEvent e){
                            handleSelectionEvent(e);
                        }
                    });

                    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
                    jPanel2.setLayout(jPanel2Layout);
                    jPanel2Layout.setHorizontalGroup(
                        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addGap(55, 55, 55)
                            .addComponent(jScrollPane3)
                            .addGap(29, 29, 29))
                    );
                    jPanel2Layout.setVerticalGroup(
                        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    );

                    jTable2.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [1][3],
                        new String [] {
                            "First Name", "Last Name", "Phone Number"
                        }
                    ));
                    jTable2.setAutoscrolls(false);
                    jTable2.setShowGrid(true);
                    jTable2.getTableHeader().setReorderingAllowed(false);
                    jTable2.getTableHeader().setResizingAllowed(false);
                    jTable2.setCellSelectionEnabled(false);
                    jTable2.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyPressed(java.awt.event.KeyEvent evt) {
                            jTable2KeyPressed(evt);
                        }
                    });
                    jScrollPane2.setViewportView(jTable2);

                    add_stud_but.setText("Add Student");
                    add_stud_but.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            add_stud_butActionPerformed(evt);
                        }
                    });

                    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
                    jPanel3.setLayout(jPanel3Layout);
                    jPanel3Layout.setHorizontalGroup(
                        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(57, 57, 57)
                            .addComponent(jScrollPane2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(add_stud_but, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(28, 28, 28))
                    );
                    jPanel3Layout.setVerticalGroup(
                        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(add_stud_but, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    );

                    create_course_but.setText("Create a course");
                    create_course_but.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            create_course_butActionPerformed(evt);
                        }
                    });

                    rmv_course_but.setText("Remove a course");
                    rmv_course_but.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            rmv_course_butActionPerformed(evt);
                        }
                    });

                    jButton1.setText("Room Schedule");
                    jButton1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jButton1ActionPerformed(evt);
                        }
                    });

                    msgbox.setEditable(false);
                    msgbox.setColumns(20);
                    msgbox.setLineWrap(true);
                    msgbox.setRows(5);
                    jScrollPane6.setViewportView(msgbox);

                    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Filter by Timeslot (Default)","900 to 1000", "1000 to 1100", "1100 to 1200", "1200 to 1300", "1300 to 1400", "1400 to 1500", "1500 to 1600", "1600 to 1700", "1700 to 1800" }));
                    jComboBox1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jComboBox1ActionPerformed(evt);
                        }
                    });

                    jMenu1.setText("File");

                    jMenuItem1.setText("Save");
                    jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jMenuItem1ActionPerformed(evt);
                        }
                    });
                    jMenu1.add(jMenuItem1);

                    jMenuItem2.setText("Load");
                    jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jMenuItem2ActionPerformed(evt);
                        }
                    });
                    jMenu1.add(jMenuItem2);

                    jMenuItem3.setText("Clear Session");
                    jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jMenuItem3ActionPerformed(evt);
                        }
                    });
                    jMenu1.add(jMenuItem3);

                    jMenuBar1.add(jMenu1);

                    setJMenuBar(jMenuBar1);

                    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                    getContentPane().setLayout(layout);
                    layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(71, 71, 71)
                                            .addComponent(jLabel1))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(47, 47, 47)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(add_room_but, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(rmv_room_but, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                    .addGap(55, 55, 55)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 332, Short.MAX_VALUE))
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(create_course_but, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(rmv_course_but, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(0, 0, Short.MAX_VALUE)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(31, 31, 31))
                    );
                    layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(22, 22, 22)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(add_room_but)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(rmv_room_but)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(create_course_but)
                                        .addComponent(rmv_course_but)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    );

                    pack();
                }// </editor-fold>//GEN-END:initComponents

    //Handler when add_room button is clicked
    private void add_room_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_room_butActionPerformed
        // TODO add your handling code here:

        //creates a jOptionpane and prompts user for input
        javax.swing.JOptionPane jOptionPane1 = new javax.swing.JOptionPane();
        try {
            
            //gets input from user
            int room_id = Integer.valueOf(jOptionPane1.showInputDialog("Please enter a valid room number:  "));
            
            //make sure room id is greater than zero (ie valid)
            if (room_id < 0) {
                throw new NumberFormatException(); //throws exception otherwise
            }
            
            
            r.addRoom(room_id);
            
            msgbox.setText(baos.toString());
            baos.reset();

            r.getRoomList().sort(new Comparator<Room>() {
                @Override
                public int compare(Room r1, Room r2) {
                    return Integer.compare(r1.getNum(), r2.getNum());
                }
            });

            //refresh room list
            this.refresh_room_list();
            
           
            
            
        } catch (NumberFormatException e) {
            javax.swing.JOptionPane err = new javax.swing.JOptionPane();
            err.showMessageDialog(null, "Invalid Room id! Room Id must be positive integer form! ", "alert", err.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_add_room_butActionPerformed

    //event handler when rmv_room_button is clicked
    private void rmv_room_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmv_room_butActionPerformed
        
        // get the index from jList1
        int index = jList1.getSelectedIndex();
        
            //if it is a valid index then get the room id from the roomlist using the index
            //remove the room using the room id
            if (index > -1)
            {
                int room_id = r.getRoomList().get(index).getNum();
                r.removeRoom(room_id);
            }
            
            //refresh the jList on the GUI
            refresh_room_list();
            
            //if there is no room in the list then disable the remove room button
            if (r.getRoomList().isEmpty())
            {
                rmv_room_but.setEnabled(false);
            }
            
            //redirect whatever output to the console box and clears the ouput stream
            msgbox.setText(baos.toString());
            baos.reset();
        
    }//GEN-LAST:event_rmv_room_butActionPerformed

    private void add_stud_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_stud_butActionPerformed
        // TODO add your handling code here:
        if (jTable2.isEditing()){
         jTable2.getCellEditor().stopCellEditing();}
        try {
            if ((!(jTable2.getValueAt(0, 0).toString().matches("[A-Z][a-zA-Z]*")))||(!(jTable2.getValueAt(0, 1).toString().matches("[a-zA-z]+([ '-][a-zA-Z]+)*")))) {
              
                throw new Exception("Unable to add student. Name must have an upper cased letter and also must not contain numerical characters. ");
            }
            
           
            //make sure it is a valid phone number
           String phn = jTable2.getValueAt(0,2).toString();
           if (phn.length() == 10)
           {
               
              if (!(isNumeric(phn)))
              {
                  throw new NumberFormatException();
              }
              
               
           }
           else {throw new NumberFormatException();}
           
           
           
            
            //System.out.println(jTable2.getValueAt(0,0).toString());
            Object[] stud_info = {jTable2.getValueAt(0, 0), jTable2.getValueAt(0, 1), jTable2.getValueAt(0, 2)};

            //System.out.println(stud_info[0]);
            createStudent(stud_info[0].toString(), stud_info[1].toString(), stud_info[2].toString());
            
            
            refresh_stud_table();
            
            msgbox.setText(baos.toString());
            baos.flush();
            baos.reset();
            
        }
        catch (NumberFormatException e)
        {
            javax.swing.JOptionPane err = new javax.swing.JOptionPane();
            jTable2.setValueAt(null, 0, 2);
            err.showMessageDialog(null, "Invalid Phone Number Format. Please input a 10 digits number.", "alert", err.ERROR_MESSAGE);
        }
        catch (NullPointerException e)
        {
            javax.swing.JOptionPane err = new javax.swing.JOptionPane();
            jTable2.setValueAt(null, 0, 0);
            jTable2.setValueAt(null, 0, 1);
            err.showMessageDialog(null, "Please enter a valid value in the textfield!", "alert", err.ERROR_MESSAGE);
        }
        catch (Exception e) {
            javax.swing.JOptionPane err = new javax.swing.JOptionPane();
            jTable2.setValueAt(null, 0, 0);
            jTable2.setValueAt(null, 0, 1);
            err.showMessageDialog(null, e.getMessage(), "alert", err.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_add_stud_butActionPerformed

    private void jTable2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable2KeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_DELETE)
        {
            int index = jTable2.getSelectedColumn();
            if (index > -1)
            {
                jTable2.setValueAt(null, 0, index);
            }
               
        }
    }//GEN-LAST:event_jTable2KeyPressed

    private void rmv_stud_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmv_stud_butActionPerformed
        // TODO add your handling code here:
        try{
            
        int index = jTable1.getSelectedRow();
        
            if (index > -1)
            {
                int id = Integer.parseInt(jTable1.getValueAt(index, 0).toString());
                //System.setOut(old);
               // System.out.println(index);
                removeStudent(id);
            }
            
            
            msgbox.setText(baos.toString());
            baos.reset();
            refresh_stud_table();
        }
        catch (java.lang.NullPointerException e)
        {
            msgbox.setText("Please select a student to remove!");
        }
   
    }//GEN-LAST:event_rmv_stud_butActionPerformed

    
    private void handleSelectionEvent(javax.swing.event.ListSelectionEvent e)
    {
        /*
        stud_table_selected_index = jTable1.getSelectedRow();
        //System.setOut(old);
        //System.out.println(index);
        //System.out.print(index);
        
        if (jTable1.getValueAt(stud_table_selected_index+1,0) == null)
        {
          //disable both the check schedule and schedule course button   
           this.SetEnableSchedCourseButton(false);
          this.SetEnableCheckSchedButton(false);
           this.SetEnableRemoveStudButton(false);
        }
        else
        {
            //else enable them
            this.SetEnableSchedCourseButton(true);
            this.SetEnableCheckSchedButton(true);
            this.SetEnableRemoveStudButton(true);
        }*/
    }
    
    private void schedule_course_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schedule_course_butActionPerformed
        // TODO add your handling code here:
        
        try{
         int index = jTable1.getSelectedRow();
         
         int id = Integer.parseInt(jTable1.getValueAt(index, 0).toString());
         Student stud = getStudent(id);
         //System.out.println(stud);
         
        Form.ScheduleCourseForm schedule_course_form = new ScheduleCourseForm(this,true,this,stud,r);
        new Thread(schedule_course_form).start();
        
        refresh_course_table();
        }
        catch ( NullPointerException e)
        {
            System.out.println("Please select a student to schedule course!");
            msgbox.setText(baos.toString());
            baos.reset();
        }
        catch( IndexOutOfBoundsException e)
        {
            System.out.println("Please select a student to schedule course!");
            msgbox.setText(baos.toString());
            baos.reset();
        }
         
    }//GEN-LAST:event_schedule_course_butActionPerformed

    private void create_course_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_create_course_butActionPerformed
        // TODO add your handling code here:
        Form.create_course_dialog dialog = new create_course_dialog(this,true,r,this);
        dialog.setVisible(true);
        
        refresh_course_table();
    }//GEN-LAST:event_create_course_butActionPerformed

    private void rmv_course_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmv_course_butActionPerformed
        // TODO add your handling code here:
        try{
        if (r.getCourseList().isEmpty())
        {
            rmv_course_but.setEnabled(false);
        }
        
        int index = this.jTable4.getSelectedRow();
        
        if (index > -1)
        {
            String c_name = jTable4.getValueAt(index, 0).toString();
            r.removeCourse2(index);
        }
        
        this.refresh_course_table();
        
        msgbox.setText(baos.toString());
        baos.reset();
        }
        catch (NullPointerException e)
        {
            System.out.println("Please select a course to remove!");
            msgbox.setText(baos.toString());
            baos.reset();
        }
    }//GEN-LAST:event_rmv_course_butActionPerformed

    private void check_sched_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_sched_butActionPerformed
        // TODO add your handling code here:
        try{
         int index = jTable1.getSelectedRow();
         
         int id = Integer.parseInt(jTable1.getValueAt(index, 0).toString());
         Student stud = getStudent(id);
         //System.out.println(stud);
         
        Form.StudSchedule studscheduleform = new StudSchedule(this,true,this,stud,r);
        new Thread(studscheduleform).start();
        
        refresh_course_table();
        }
        catch ( NullPointerException e)
        {
            msgbox.setText("Nothing is selected. Please select a student to check schedule!");
        }
        catch (IndexOutOfBoundsException e)
        {
            msgbox.setText("Nothing is selected. Please select a student to check schedule!");
        }
         
        
    }//GEN-LAST:event_check_sched_butActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         int index = jList1.getSelectedIndex();
            if (index > -1)
            {
                int room_id = r.getRoomList().get(index).getNum();
                
                new Thread(new RoomSchedule(this,true,this,r,r.getRoomList().get(index))).start();
            }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        filter_selected = jComboBox1.getSelectedIndex();
        //System.out.println(filter_selected);
        msgbox.setText("Filtering by " + jComboBox1.getSelectedItem().toString());
        //baos.reset();
        this.refresh_course_table();
        
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        this.saveState();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        this.loadState();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        this.clearState();
        
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    
     public void removeStudent(int id) {
        //check if it is a valid student id
        if (isValidStudentId(id)) {
            //check if student is scheduled to any course, if his schedule is empty then is safe to remove 
            if (getStudent(id).getStudentSchedule().isEmpty()) {
                arr.remove(getStudent(id));
                System.out.println("Student is removed.");

            } else {
                System.out.println("Student is scheduled to a course. Unable to remove.");
            }
        } else {
            throw new IllegalArgumentException("Invalid Student ID!");
        }

    }

    public boolean isValidStudentId(int id) {
        for (Student s : arr) {
            if (s.getStudId() == id) {
                return true;
            }
        }

        return false;
    }

    //helper function to grrefresh_stud_tableab student given his or her id
    public Student getStudent(int id) {
        for (Student s : arr) {
            if (s.getStudId() == id) {
                return s;
            }
        }

        return null;
    }
    public void createStudent(String fname, String lname, String phn) {
        arr.add(new Student(fname, lname, phn));
        System.out.println("New student created!");
    }
    
    public void SetEnableRemoveCourseButton(boolean b)
    {
        this.rmv_course_but.setEnabled(b);
    }
    /**
     * Code shared by rosettacode.org
     * Used and modified with permission under GNU Free Documentation License 
     * 
     *    -Use to check if a String if numerical. Had to use this because Integer.parseInt() does not work for large numbers 
     */
    public static boolean isNumeric(String inputData) {
    return inputData.matches("[-+]?\\d+(\\.\\d+)?");
    }
    
    public void refresh_room_list()
    {
        listmodel_room.clear();
            for (Room rm : r.getRoomList()) {
                listmodel_room.addElement(rm.toString());
            }
            
            jList1.validate();
        
            //set rmv button to false if list is empty
            if (r.getRoomList().isEmpty())
            {
                this.SetEnableRemoveRoomButton(false);
            }
            else
            {
                this.SetEnableRemoveRoomButton(true);
            }
    }
    
    public void refresh_stud_table()
    {
        stud_table = new javax.swing.table.DefaultTableModel(
                        new Object[1][4],
                        new String[]{
                            "ID", "First Name", "Last Name", "Phone Number"
                        }) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
            
            stud_table.setRowCount(0);
            
           
            //check if the size of student list is greater than the maximum table size
            if (arr.size() < 9) {
                
               
    
                //add to table from student list
                for (Student s : arr) {
                    //System.out.println(s);
                    stud_table.addRow(new Object[]{s.getStudId(),s.getFirstName(),s.getLastName(),s.getPhoneNum()});
                }
                
                stud_table.setRowCount(9);
                 if (arr.isEmpty())
                {
                this.SetEnableRemoveStudButton(false);
                this.SetEnableCheckSchedButton(false);
                this.SetEnableSchedCourseButton(false);
                }else
                 {
                this.SetEnableRemoveStudButton(true);
                this.SetEnableCheckSchedButton(true);
                this.SetEnableSchedCourseButton(true);
                 }
            }
            else {
                
                //add to table from student list
                for (Student s : arr) {
                    stud_table.addRow(new Object[]{s.getStudId(),s.getFirstName(),s.getLastName(),s.getPhoneNum()});
                }
                
                this.SetEnableRemoveStudButton(true);
                this.SetEnableCheckSchedButton(true);
                this.SetEnableSchedCourseButton(true);
            }
            
            jTable1.setModel(stud_table);
            
            
            
            
           jTable1.validate();
    }
    
    public void refresh_course_table()
    {
        
        
        
        //default filter
        course_table = new javax.swing.table.DefaultTableModel(
                        new Object[1][5],
                        new String[]{
                            "Name", "Start Time", "End Time", "Room", "# Enrolled"
                        }) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
            
            course_table.setRowCount(0);
            
           
            //check if the size of student list is greater than the maximum table size
            if (r.getCourseList().size() < 7) {
                
                
                //add to table from student list
                this.addCoursetoCourseTable(this.filter_selected);
                
                course_table.setRowCount(7);
                
            }
            else
            {
                
                //add to table from student list
                this.addCoursetoCourseTable(this.filter_selected);
            }
            
            if (r.getCourseList().isEmpty())
            {
                this.SetEnableRemoveCourseButton(false);
            }
            else
            {
                SetEnableRemoveCourseButton(true);
            }
            
            jTable4.setModel(course_table);
            jTable4.validate();
    }
    
    /////////////////////////////////////////////////
    //methods to disable and enable the remove buttons
    public void SetEnableRemoveRoomButton(boolean b)
    {
        this.rmv_room_but.setEnabled(b);
    }
    
    public void SetEnableRemoveStudButton(boolean b)
    {
        this.rmv_stud_but.setEnabled(b);
    }
    
    public void SetEnableCheckSchedButton(boolean b)
    {
        this.check_sched_but.setEnabled(b);
    }
    
    public void SetEnableSchedCourseButton(boolean b)
    {
        this.schedule_course_but.setEnabled(b);
    }
    //////////////////////////////////////////////////
    
    public void addCoursetoCourseTable(int filter)
    {
        int starttime;
        int endtime;
        switch (filter)
        {
            case 0: 
                starttime = 900;
                endtime = 1800;
                break;
            case 1:
                starttime = 900;
                endtime = 1000;
                break;
            case 2:
                starttime = 1000;
                endtime  = 1100;
                break;
            case 3:
                starttime = 1100;
                endtime = 1200;
                break;
            case 4:
                starttime = 1200;
                endtime = 1300;
                break;
            case 5:
                starttime = 1300;
                endtime = 1400;
                break;
            case 6:
                starttime = 1400;
                endtime = 1500;
                break;
            case 7:
                starttime = 1500;
                endtime = 1600;
                break;
            case 8:
                starttime = 1600;
                endtime = 1700;
                break;
            case 9:
                starttime = 1700;
                endtime = 1800;
                break;
            default:
                starttime =900;
                endtime = 1800;
                break;
                
        }
        
        //for each course in the list
        for (Course c :r.getCourseList())
        {
            //if it is in the time slot
            if (((c.getStartTime()>= starttime && c.getStartTime() <= endtime)|| (c.getEndTime()>= starttime && c.getEndTime() <= endtime)) && !((c.getStartTime() == endtime)) && !(c.getEndTime() == starttime))
            {
                 course_table.addRow(new Object[]{c.getCourseName(),c.getStartTime(),c.getEndTime(),c.getRoomNum(),c.getStudentList().size()});
            }
        }
        
       
    }
    
    public void saveState()
    {
        try
        {
            FileOutputStream fileout = new FileOutputStream("Session.ser");
            ObjectOutputStream out = new ObjectOutputStream(fileout);
            out.writeObject(arr);
            out.writeObject(r);
            out.writeInt(Student.id_count);
            out.close();
            fileout.close();
            
            
            msgbox.setText("Serialized data is saved in Session.ser");
            
        }
        catch (IOException i)
        {
            msgbox.setText(i.getMessage());
            
        }
    }
    
    public void loadState()
    {
        try{
            FileInputStream filein = new FileInputStream("Session.ser");
            ObjectInputStream in = new ObjectInputStream(filein);
            arr = (ArrayList<Student>) in.readObject();
            r = (RoomListing) in.readObject();
            Student.id_count = in.readInt();
            in.close();
            filein.close();
            msgbox.setText("Session Loaded!");
        }
        catch (IOException i)
        {
            msgbox.setText(i.getMessage());
        }
        catch (ClassNotFoundException i)
        {
            msgbox.setText(i.getMessage());
        }
        
        this.refresh_course_table();
        this.refresh_room_list();
        this.refresh_stud_table();
    }
    
    public void clearState()
    {
        arr = new ArrayList<Student>();
        r = new RoomListing(0);
        
        msgbox.setText("Session cleared!");
        this.refresh_course_table();
        this.refresh_room_list();
        this.refresh_stud_table();
        
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

       
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex) ;   }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
                
                
            }
        });
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_room_but;
    private javax.swing.JButton add_stud_but;
    private javax.swing.JButton check_sched_but;
    private javax.swing.JButton create_course_but;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JOptionPane jOptionPane2;
    private javax.swing.JOptionPane jOptionPane3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTable1;
    private javax.swing.ListSelectionModel selectionmodel;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextArea msgbox;
    private javax.swing.JButton rmv_course_but;
    private javax.swing.JButton rmv_room_but;
    private javax.swing.JButton rmv_stud_but;
    private javax.swing.JButton schedule_course_but;
    // End of variables declaration//GEN-END:variables

    private javax.swing.DefaultListModel listmodel_room;
    private javax.swing.table.DefaultTableModel stud_table;
    private javax.swing.table.DefaultTableModel course_table;
    private ByteArrayOutputStream baos;
    private PrintStream ps;
    private PrintStream old = System.out;
    private int filter_selected;
    private int stud_table_selected_index;
}
